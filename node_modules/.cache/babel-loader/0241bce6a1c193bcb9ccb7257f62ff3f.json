{"ast":null,"code":"var _jsxFileName = \"/Users/vladyslavharshyn/Documents/GitHub/goit-react-hw-04-phonebook/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from 'nanoid';\nimport { useState, useEffect } from 'react';\nimport Section from './components/Section/Section';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const savedContacts = JSON.parse(localStorage.getItem('contacts'));\n  const [contacts, setContacts] = useState(savedContacts ? savedContacts : []);\n  const [filter, setFilter] = useState('');\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addNewContact = newContactInfo => {\n    const isDuplicate = contacts.map(a => a.name).includes(newContactInfo.name);\n\n    if (isDuplicate) {\n      alert(`${newContactInfo.name} is already in your contacts`);\n      return;\n    }\n\n    const newContactId = shortid.generate();\n    const newContact = {\n      id: newContactId,\n      ...newContactInfo\n    };\n    setContacts(prevState => [newContact, ...prevState]);\n  };\n\n  const removeContact = id => {\n    setContacts(prevState => prevState.filter(a => a.id !== id));\n  };\n\n  const getFiltredContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  };\n\n  const filtredContacts = getFiltredContacts();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: 'Phonebook',\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: addContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: 'Contacts',\n      children: /*#__PURE__*/_jsxDEV(Contacts, {\n        removeContact: removeContact,\n        onChange: e => setFilter(e.target.value),\n        value: filter,\n        handleFilter: handleFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}; // class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n//   componentDidMount() {\n//     const ContactsParse = JSON.parse(localStorage.getItem('users'));\n//     if (ContactsParse) {\n//       this.setState({ contacts: ContactsParse });\n//     }\n//   }\n//   componentDidUpdate(prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem('users', JSON.stringify(this.state.contacts));\n//     }\n//   }\n//   addContact = ({ name, number }) => {\n//     const { contacts } = this.state;\n//     if (contacts.find(el => el.name === name)) {\n//       alert(`${name} is already in contacts`);\n//     } else {\n//       this.setState(({ contacts }) => {\n//         const user = {\n//           name,\n//           number,\n//           id: nanoid(),\n//         };\n//         return {\n//           contacts: [...contacts, user],\n//         };\n//       });\n//     }\n//   };\n//   removeContact = id => {\n//     this.setState(({ contacts }) => {\n//       return {\n//         contacts: contacts.filter(item => item.id !== id),\n//       };\n//     });\n//   };\n//   getFilteredConatcts = () => {\n//     const { filter, contacts } = this.state;\n//     if (!filter) {\n//       return contacts;\n//     }\n//     const filterValue = filter.toLowerCase();\n//     const filteredContacts = contacts.filter(({ name }) => {\n//       const nameValue = name.toLowerCase();\n//       return nameValue.includes(filterValue);\n//     });\n//     return filteredContacts;\n//   };\n//   handleFilter = ({ target }) => {\n//     this.setState({\n//       filter: target.value,\n//     });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <Section title={'Phonebook'}>\n//           <Form onSubmit={this.addContact} />\n//         </Section>\n//         <Section title={'Contacts'}>\n//           <Contacts\n//             removeContact={removeContact}\n//             getFilteredConatcts={getFilteredConatcts()}\n//             handleFilter={handleFilter}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\n\n_s(App, \"576IknnGaH1R02BLMv8WEZ6F3VI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vladyslavharshyn/Documents/GitHub/goit-react-hw-04-phonebook/src/App.jsx"],"names":["nanoid","useState","useEffect","Section","Form","Contacts","App","savedContacts","JSON","parse","localStorage","getItem","contacts","setContacts","filter","setFilter","setItem","stringify","addNewContact","newContactInfo","isDuplicate","map","a","name","includes","alert","newContactId","shortid","generate","newContact","id","prevState","removeContact","getFiltredContacts","normalizedFilter","toLocaleLowerCase","contact","toLowerCase","filtredContacts","addContact","e","target","value","handleFilter"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport { useState, useEffect } from 'react';\n\nimport Section from './components/Section/Section';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\n\nconst App = () => {\n  const savedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n  const [contacts, setContacts] = useState(savedContacts ? savedContacts : []);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addNewContact = newContactInfo => {\n    const isDuplicate = contacts.map(a => a.name).includes(newContactInfo.name);\n    if (isDuplicate) {\n      alert(`${newContactInfo.name} is already in your contacts`);\n      return;\n    }\n\n    const newContactId = shortid.generate();\n    const newContact = {\n      id: newContactId,\n      ...newContactInfo,\n    };\n    setContacts(prevState => [newContact, ...prevState]);\n  };\n\n  const removeContact = id => {\n    setContacts(prevState => prevState.filter(a => a.id !== id));\n  };\n\n  const getFiltredContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filtredContacts = getFiltredContacts();\n\n  return (\n    <div>\n      <Section title={'Phonebook'}>\n        <Form onSubmit={addContact} />\n      </Section>\n      <Section title={'Contacts'}>\n        <Contacts\n          removeContact={removeContact}\n          onChange={e => setFilter(e.target.value)}\n          value={filter}\n          handleFilter={handleFilter}\n        />\n      </Section>\n    </div>\n  );\n};\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const ContactsParse = JSON.parse(localStorage.getItem('users'));\n//     if (ContactsParse) {\n//       this.setState({ contacts: ContactsParse });\n//     }\n//   }\n\n//   componentDidUpdate(prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem('users', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const { contacts } = this.state;\n\n//     if (contacts.find(el => el.name === name)) {\n//       alert(`${name} is already in contacts`);\n//     } else {\n//       this.setState(({ contacts }) => {\n//         const user = {\n//           name,\n//           number,\n//           id: nanoid(),\n//         };\n//         return {\n//           contacts: [...contacts, user],\n//         };\n//       });\n//     }\n//   };\n\n//   removeContact = id => {\n//     this.setState(({ contacts }) => {\n//       return {\n//         contacts: contacts.filter(item => item.id !== id),\n//       };\n//     });\n//   };\n\n//   getFilteredConatcts = () => {\n//     const { filter, contacts } = this.state;\n\n//     if (!filter) {\n//       return contacts;\n//     }\n//     const filterValue = filter.toLowerCase();\n//     const filteredContacts = contacts.filter(({ name }) => {\n//       const nameValue = name.toLowerCase();\n//       return nameValue.includes(filterValue);\n//     });\n\n//     return filteredContacts;\n//   };\n\n//   handleFilter = ({ target }) => {\n//     this.setState({\n//       filter: target.value,\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <Section title={'Phonebook'}>\n//           <Form onSubmit={this.addContact} />\n//         </Section>\n//         <Section title={'Contacts'}>\n//           <Contacts\n//             removeContact={removeContact}\n//             getFilteredConatcts={getFilteredConatcts()}\n//             handleFilter={handleFilter}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}