{"ast":null,"code":"var _jsxFileName = \"/Users/vladyslavharshyn/Documents/GitHub/goit-react-hw-04-phonebook/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from 'nanoid';\nimport { useState, useEffect } from 'react';\nimport Section from './components/Section/Section';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const savedContacts = JSON.parse(localStorage.getItem('contacts'));\n  const [contacts, setContacts] = useState(savedContacts ? savedContacts : []);\n  const [filter, setFilter] = useState('');\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = _ref => {\n    let {\n      name,\n      number\n    } = _ref;\n    const searchName = contacts.map(_ref2 => {\n      let {\n        name\n      } = _ref2;\n      return name;\n    });\n\n    if (searchName.includes(name)) {\n      return alert(`${name} is already in contacts`);\n    }\n\n    const id = nanoid();\n    const newContact = {\n      name,\n      number,\n      id\n    };\n    setContacts(prevContacts => {\n      return [...prevContacts, newContact];\n    });\n  };\n\n  const removeContact = id => {\n    setContacts(prevState => prevState.filter(a => a.id !== id));\n  };\n\n  const getFiltredContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  };\n\n  const filterContacts = event => {\n    console.log(value);\n    setFilter(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: 'Phonebook',\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: addContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: 'Contacts',\n      children: /*#__PURE__*/_jsxDEV(Contacts, {\n        removeContact: removeContact,\n        getFilteredConatcts: getFiltredContacts(),\n        handleFilter: filterContacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}; // class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n//   componentDidMount() {\n//     const ContactsParse = JSON.parse(localStorage.getItem('users'));\n//     if (ContactsParse) {\n//       this.setState({ contacts: ContactsParse });\n//     }\n//   }\n//   componentDidUpdate(prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem('users', JSON.stringify(this.state.contacts));\n//     }\n//   }\n//   addContact = ({ name, number }) => {\n//     const { contacts } = this.state;\n//     if (contacts.find(el => el.name === name)) {\n//       alert(`${name} is already in contacts`);\n//     } else {\n//       this.setState(({ contacts }) => {\n//         const user = {\n//           name,\n//           number,\n//           id: nanoid(),\n//         };\n//         return {\n//           contacts: [...contacts, user],\n//         };\n//       });\n//     }\n//   };\n//   removeContact = id => {\n//     this.setState(({ contacts }) => {\n//       return {\n//         contacts: contacts.filter(item => item.id !== id),\n//       };\n//     });\n//   };\n//   getFilteredConatcts = () => {\n//     const { filter, contacts } = this.state;\n//     if (!filter) {\n//       return contacts;\n//     }\n//     const filterValue = filter.toLowerCase();\n//     const filteredContacts = contacts.filter(({ name }) => {\n//       const nameValue = name.toLowerCase();\n//       return nameValue.includes(filterValue);\n//     });\n//     return filteredContacts;\n//   };\n//   handleFilter = ({ target }) => {\n//     this.setState({\n//       filter: target.value,\n//     });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <Section title={'Phonebook'}>\n//           <Form onSubmit={this.addContact} />\n//         </Section>\n//         <Section title={'Contacts'}>\n//           <Contacts\n//             removeContact={removeContact}\n//             getFilteredConatcts={getFilteredConatcts()}\n//             handleFilter={handleFilter}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\n\n_s(App, \"576IknnGaH1R02BLMv8WEZ6F3VI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vladyslavharshyn/Documents/GitHub/goit-react-hw-04-phonebook/src/App.jsx"],"names":["nanoid","useState","useEffect","Section","Form","Contacts","App","savedContacts","JSON","parse","localStorage","getItem","contacts","setContacts","filter","setFilter","setItem","stringify","addContact","name","number","searchName","map","includes","alert","id","newContact","prevContacts","removeContact","prevState","a","getFiltredContacts","normalizedFilter","toLocaleLowerCase","contact","toLowerCase","filterContacts","event","console","log","value","target"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport { useState, useEffect } from 'react';\n\nimport Section from './components/Section/Section';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\n\nconst App = () => {\n  const savedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n  const [contacts, setContacts] = useState(savedContacts ? savedContacts : []);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    const searchName = contacts.map(({ name }) => name);\n\n    if (searchName.includes(name)) {\n      return alert(`${name} is already in contacts`);\n    }\n\n    const id = nanoid();\n    const newContact = { name, number, id };\n\n    setContacts(prevContacts => {\n      return [...prevContacts, newContact];\n    });\n  };\n\n  const removeContact = id => {\n    setContacts(prevState => prevState.filter(a => a.id !== id));\n  };\n\n  const getFiltredContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filterContacts = event => {\n    console.log(value);\n    setFilter(event.target.value);\n  };\n\n  return (\n    <div>\n      <Section title={'Phonebook'}>\n        <Form onSubmit={addContact} />\n      </Section>\n      <Section title={'Contacts'}>\n        <Contacts\n          removeContact={removeContact}\n          getFilteredConatcts={getFiltredContacts()}\n          handleFilter={filterContacts}\n        />\n      </Section>\n    </div>\n  );\n};\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const ContactsParse = JSON.parse(localStorage.getItem('users'));\n//     if (ContactsParse) {\n//       this.setState({ contacts: ContactsParse });\n//     }\n//   }\n\n//   componentDidUpdate(prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem('users', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const { contacts } = this.state;\n\n//     if (contacts.find(el => el.name === name)) {\n//       alert(`${name} is already in contacts`);\n//     } else {\n//       this.setState(({ contacts }) => {\n//         const user = {\n//           name,\n//           number,\n//           id: nanoid(),\n//         };\n//         return {\n//           contacts: [...contacts, user],\n//         };\n//       });\n//     }\n//   };\n\n//   removeContact = id => {\n//     this.setState(({ contacts }) => {\n//       return {\n//         contacts: contacts.filter(item => item.id !== id),\n//       };\n//     });\n//   };\n\n//   getFilteredConatcts = () => {\n//     const { filter, contacts } = this.state;\n\n//     if (!filter) {\n//       return contacts;\n//     }\n//     const filterValue = filter.toLowerCase();\n//     const filteredContacts = contacts.filter(({ name }) => {\n//       const nameValue = name.toLowerCase();\n//       return nameValue.includes(filterValue);\n//     });\n\n//     return filteredContacts;\n//   };\n\n//   handleFilter = ({ target }) => {\n//     this.setState({\n//       filter: target.value,\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <Section title={'Phonebook'}>\n//           <Form onSubmit={this.addContact} />\n//         </Section>\n//         <Section title={'Contacts'}>\n//           <Contacts\n//             removeContact={removeContact}\n//             getFilteredConatcts={getFilteredConatcts()}\n//             handleFilter={handleFilter}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}